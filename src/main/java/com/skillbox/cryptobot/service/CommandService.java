package com.skillbox.cryptobot.service;

import com.skillbox.cryptobot.bot.CryptoBot;
import com.skillbox.cryptobot.bot.keyboard.KeyboardFactory;
import com.skillbox.cryptobot.bot.validator.SubscriberValidator;
import com.skillbox.cryptobot.utils.TextUtil;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Service
@RequiredArgsConstructor
@Slf4j
public class CommandService {

    private final CryptoCurrencyService service;
    private final StateService stateService;
    private final SubscriberValidator subscriberValidator;
    private final SubscriberService subscriberService;

    public void handleCallback(Update update, CryptoBot bot) {
        Long chatId = update.getCallbackQuery().getMessage().getChatId();
        String userName = update.getCallbackQuery().getFrom().getUserName();
        switch (update.getCallbackQuery().getData()) {
            case "GET_PRICE" -> getPrice(chatId, bot);
            case "GET_SUBSCRIPTION" -> getSubscription(userName,chatId,bot);
            case "UNSUBSCRIBE" -> unsubscribe(chatId,userName,bot);
            case "SUBSCRIBE" -> {
                stateService.setState(chatId, "WAITING_FOR_PRICE");
                try {
                    bot.execute(new SendMessage(chatId.toString(), "–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É BTC, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è:"));
                } catch (Exception e) {
                    log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è", e);
                }
            }

        }
    }

    public void handleTextMessage(Message message, CryptoBot bot) {
        String state = stateService.getState(message.getChatId());
        switch (state) {
            case "WAITING_FOR_PRICE" -> subscribe(message, bot);
            default -> {
                if (message.getText().equals("/start")) {
                    start(message, bot);
                } else {
                    SendMessage msg = new SendMessage();
                    msg.setChatId(message.getChatId());
                    msg.setText("ü§ñ –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –í–≤–µ–¥–∏—Ç–µ /start");
                    try {
                        bot.execute(msg);
                    } catch (TelegramApiException e) {
                        throw new RuntimeException(e);
                    }
                }
            }
        }
    }

    public void start(Message message, CryptoBot bot) {
        SendMessage answer = new SendMessage();
        answer.setChatId(message.getChatId().toString());
        String userName = message.getFrom().getUserName();
        answer.setText("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:");
        answer.setReplyMarkup(KeyboardFactory.MenuFactory.mainMenu());
        if (!subscriberValidator.isAlreadyExists(userName)) {
            subscriberService.createSubscriber(userName, message.getChatId());
        }
        try {
            bot.execute(answer);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å—Ç–∞—Ä—Ç–æ–≤–æ–≥–æ –º–µ–Ω—é", e);
        }
    }

    public void getPrice(Long chatId, TelegramLongPollingBot bot) {
        SendMessage msg = new SendMessage();
        msg.setChatId(chatId.toString());
        try {
            msg.setText("–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞ –±–∏—Ç–∫–æ–∏–Ω–∞ " + TextUtil.toString(service.getBitcoinPrice()) + " USD");
            bot.execute(msg);
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –≤–æ–∑–Ω–∏–∫–ª–∞ /get_price –º–µ—Ç–æ–¥–µ", e);
        }
    }

    public void subscribe(Message message, CryptoBot bot) {
        Long chatId = message.getChatId();
        String text = message.getText();

        SendMessage msg = new SendMessage();
        msg.setChatId(message.getChatId());
        if (subscriberValidator.isBigDecimal(text)) {
            stateService.clearState(chatId);
            msg.setText("‚úÖ –ù–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ –Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å " + text + " USD");
            subscriberService.updatePrice(message.getText(), message.getFrom().getUserName());
        } else {
            msg.setText("‚õî–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ USD (—Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã –∏ —Ç–æ—á–∫–∞).\n–ü—Ä–∏–º–µ—Ä: 10 –∏–ª–∏ 10.50");
        }

        try {
            bot.execute(msg);
        } catch (TelegramApiException e) {
            log.error("Error occurred in /subscribe command", e);
        }
    }
    public void getSubscription(String userName, Long chatId, TelegramLongPollingBot bot){
        SendMessage answer = new SendMessage();
        answer.setChatId(chatId);
        String price = subscriberService.getSubscribePrice(userName);
        answer.setText(price);

        try {
            bot.execute(answer);
        } catch (TelegramApiException e) {
            log.error("Error occurred in /subscribe command", e);
        }
    }

    public void unsubscribe(Long chatId,String userName, TelegramLongPollingBot bot){
        SendMessage answer = new SendMessage();
        answer.setChatId(chatId);

        answer.setText("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞");
        subscriberService.deletePrice(userName);
        try {
           bot.execute(answer);
        } catch (TelegramApiException e) {
            log.error("Error occurred in /subscribe command", e);
        }
    }
}
